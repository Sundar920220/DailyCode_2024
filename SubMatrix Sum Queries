Problem Description: 

Given a matrix of integers A of size N x M and multiple queries Q, for each query, find and return the submatrix sum.

Inputs to queries are top left (b, c) and bottom right (d, e) indexes of submatrix whose sum is to find out.

Solution : 

public int[] solve(int[][] A, int[] B, int[] C, int[] D, int[] E) {
        int n = A.length;
        int m = A[0].length;
        int mod = 1000000007;
        
        // Compute prefix sum matrix
        long pfSum[][] = new long[n][m];
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(j == 0) {
                    pfSum[i][j] = A[i][j];
                } else {
                    pfSum[i][j] = pfSum[i][j - 1] + A[i][j];
                }
            }
        }
        for(int j = 0; j < m; j++) {
            for(int i = 1; i < n; i++) {
                pfSum[i][j] = pfSum[i - 1][j] + pfSum[i][j];
            }
        }
        
        // Compute sum of submatrices and store results in subMatrixSum array
        int subMatrixSum[] = new int[B.length];
        for(int i = 0; i < B.length; i++) {
            int a1 = B[i] - 1;
            int b1 = C[i] - 1;
            int a2 = D[i] - 1;
            int b2 = E[i] - 1;
            long sum = pfSum[a2][b2];
            if(b1 > 0) {
                sum = sum - pfSum[a2][b1 - 1];
            }
            if(a1 > 0) {
                sum = sum - pfSum[a1 - 1][b2];
            }
            if(a1 > 0 && b1 > 0) {
                sum += pfSum[a1 - 1][b1 - 1];
            }
            subMatrixSum[i] = (int)(((sum % mod + mod) % mod));
        }
        
        return subMatrixSum;
    }
}

Time Complexity:
 * - The prefix sum matrix computation requires O(n * m) time, where n is the number of rows and m is the number of columns in the matrix.
 * - Computing the sum of submatrices takes O(k) time, where k is the number of queries.
 * - Thus, the overall time complexity is O(n * m + k), where n, m, and k are as defined above.
 * 
 * Space Complexity:
 * - The prefix sum matrix requires O(n * m) space.
 * - The additional space required for storing subMatrixSum array is O(k), where k is the number of queries.
 * - Thus, the overall space complexity is O(n * m + k), where n, m, and k are as defined above.
 */
