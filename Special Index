Daily Coding:  Special Index

Problem Description: Given an array, arr[] of size N, the task is to find the count of array indices such that removing an element from these indices makes the sum of even-indexed and odd-indexed array elements equal.

Solution : 

public class Solution {
    public int solve(int[] A) {
        // Store the length of the array
        int n = A.length;
        
        // Initialize count to track the number of valid indices
        int count = 0;
        
        // Initialize prefix sum arrays for even and odd indexed elements
        int[] pfOdd = new int[n];
        int[] pfEven = new int[n];
        
        // Calculate the prefix sum array for even-indexed elements
        pfEven[0] = A[0];
        for (int i = 1; i < n; i++) {
            // If the current index is even, add the current element to pfEven
            if (i % 2 == 0) {
                pfEven[i] = pfEven[i - 1] + A[i];
            } else {
                // Otherwise, carry forward the previous prefix sum
                pfEven[i] = pfEven[i - 1];
            }
        }
        
        // Calculate the prefix sum array for odd-indexed elements
        pfOdd[0] = 0; // First element of pfOdd is 0 since there are no odd-indexed elements before the first element
        for (int i = 1; i < n; i++) {
            // If the current index is odd, add the current element to pfOdd
            if (i % 2 != 0) {
                pfOdd[i] = pfOdd[i - 1] + A[i];
            } else {
                // Otherwise, carry forward the previous prefix sum
                pfOdd[i] = pfOdd[i - 1];
            }
        }
        
        // Check each index in the array
        for (int i = 0; i < n; i++) {
            // Calculate sum of even-indexed elements after removing element at index i
            int sE = pfOdd[n - 1] - pfOdd[i];
            // Calculate sum of odd-indexed elements after removing element at index i
            int sO = pfEven[n - 1] - pfEven[i];
            
            // If i is not the first element, add the prefix sums up to i-1
            if (i != 0) {
                sE += pfEven[i - 1];
                sO += pfOdd[i - 1];
            }
            
            // If the sum of even and odd indexed elements after removing element at index i are equal, increment count
            if (sE == sO) {
                count++;
            }
        }
        
        // Return the count of valid indices
        return count;
    }
}


Explanation : 

Initialization:

The function solve takes an array A as input.
Initialize variables n for array length and count for keeping track of the number of valid indices.
Two prefix sum arrays pfOdd and pfEven are initialized to keep track of the cumulative sum of elements at odd and even indices respectively.
Compute Prefix Sum Arrays:

The code computes the prefix sum arrays:
pfEven stores the cumulative sum of elements at even indices up to each position.
pfOdd stores the cumulative sum of elements at odd indices up to each position.

Main Logic:

For each index i in the array:
Compute the sum of odd and even indexed elements after removing the element at index i:
sE is the sum of even-indexed elements after removing the element at index i.
sO is the sum of odd-indexed elements after removing the element at index i.
Adjust the sums with the prefix sums from earlier.
If the sum of odd-indexed elements (sO) equals the sum of even-indexed elements (sE), increment count.
Return Count:

Finally, the function returns the count of valid indices.


Time Complexity:

Calculating the prefix sum arrays takes O(n).Checking each index i takes O(n).Thus, the overall time complexity is O(n).

Space Complexity:

The code uses two prefix sum arrays (pfOdd and pfEven) of length n, so the space complexity is O(n).
